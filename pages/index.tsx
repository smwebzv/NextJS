import Head from 'next/head'
import { Poppins } from 'next/font/google'
import { Header } from '@/components/Header/Header';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { Background } from '@/components/Background/Background';

import { Events } from "react-scroll/modules";
import { useEffect, useState } from 'react';
import { appScreens, ScreenType } from '@/DammyData';
import TopContainerImage from "../public/images/top-back.jpg";
import { MainHeader } from '@/components/Background/MainHeader/MainHeader';
import { OurTeam } from '@/components/OurTeam/OurTeam';
import { About } from '@/screens/About/About';
import { Contact } from '@/screens/Contact/Contact';
import { Services } from '@/screens/Services/Services';
import Snackbar from '@mui/material/Snackbar';
import Alert from '@mui/material/Alert';
import { useScroll } from 'framer-motion';
import { ContainerLayout } from '@/components/ContainerLayout/ContainerLayout';
import { openAISmWeb } from '@/lib/chatgpt';

const popins = Poppins({ subsets: ["latin"], style: ["normal"], weight: "500" });

declare module '@mui/material/Typography' {
  interface TypographyPropsVariantOverrides {
    about: true;
    highlightedAbout: true
  }
}

let theme = createTheme({});
export const mainTheme = createTheme({
  typography: {
    fontFamily: 'Poppins, Arial',
  },
  components: {
    MuiTypography: {
      styleOverrides: {
        root: {
          fontFamily: 'Poppins, Arial',
        },
        h3: {
          [theme.breakpoints.down("md")]: {
            fontSize: "2rem"
          }
        },
        h6: {
          [theme.breakpoints.down("md")]: {
            fontSize: "1.15rem",
            lineHeight: "2rem"
          }
        },
        body1: {
          [theme.breakpoints.down("md")]: {
            lineHeight: "1.8rem"
          }
        }
      },
      variants: [
        {
          props: { variant: "about", },
          style: {
            color: "#fff",
            fontSize: "1.25rem",
            fontWeight: "500",
            lineHeight: "2rem"
          },
        },
        {
          props: { variant: "highlightedAbout" },
          style: {
            fontSize: "1.25rem",
            color: "#fff",
            fontWeight: "bold"
          }
        }
      ]
    },
    MuiContainer: {
      styleOverrides: {
        maxWidthLg: {
          margin: "auto"
        }
      },
      variants: [
        {
          props: { maxWidth: "lg" },
          style: {
            margin: "auto"
          }
        }
      ]
    }
  },
});

export default function Home({ data }: any) {
  const { scrollYProgress, scrollY } = useScroll();
  const [scrollHeight, setScrollHeight] = useState<number>(0);

  const [scrollName, setScrollName] = useState<ScreenType>(appScreens[0]);

  const [snackBarOpened, setSnackBarOpened] = useState(false);

  const [beginScrollName, setBeginScrollName] = useState<ScreenType>(appScreens[0]);

  Events.scrollEvent.register('end', function (to, element) {
    const findScreenByName = appScreens.find(item => item.name === to);
    setScrollName(findScreenByName!);
  });

  Events.scrollEvent.register('begin', function (to, element) {
    const findScreenByName = appScreens.find(item => item.name === to);
    setBeginScrollName(findScreenByName!);
  });


  useEffect(() => {
    // hook into the onChange, store the current value as state.
    scrollY.onChange((v) => setScrollHeight(v));
  }, [scrollY]); //make sure to re-subscriobe


  const handleClose = () => {
    setSnackBarOpened(false);
  }

  return (
    <ThemeProvider theme={mainTheme}>
      <Head>
        <title>SmWeb</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={popins.className}>
        <Background
          scrollHeight={scrollHeight}
          scrollName={beginScrollName.calculate == "now" ? beginScrollName : scrollName}
          containerImage={TopContainerImage}
          containerId="home"
        >
          <MainHeader firstTitle={data[0]} secondTitle={data[1]} />
        </Background>
        {/* <TimelineApp
          name={beginScrollName.name}
          color={beginScrollName.color}
        /> */}
        <Header scrollHeight={scrollHeight} />
        <Services />

        <div id="team">
          <ContainerLayout
          >
            <OurTeam changeColor={true} />
          </ContainerLayout>
        </div>
        <About />
        <Contact setSnackBarOpened={setSnackBarOpened} />
      </main>
      <Snackbar open={snackBarOpened} autoHideDuration={6000} onClose={handleClose}>
        <Alert onClose={handleClose} severity="success" sx={{ width: '100%' }}>
          The message is sent!
        </Alert>
      </Snackbar>
    </ThemeProvider>
  )
}

export async function getServerSideProps() {
  const openAiData = await openAISmWeb.createCompletion({
    model: "text-davinci-003",
    prompt: "Say two line sayings with dot at the end and max 60 characters for It Company as Javascript array",
    max_tokens: 50,
    n: 1,
    temperature: 0.9,
  });

  try {
    const twoTextData = JSON.parse(openAiData.data.choices[0].text!);
    return { props: { data: twoTextData } }
  } catch (e) {
    console.log("SMTHING WENT WRONG", e);
    return { props: { data: ['Code the future. Thinking beyond boundaries.', 'We make your dreams come alive.'] } }
  }
}